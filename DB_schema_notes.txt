Section A: playerStatistics table and the Foreign Key (FK) Relationships

1. Very important schema information
playerStatistics table is based on the ESPN NFL athlete statstics imported from the ESPN API
playerStatistics is used to build all of the foreign key relationships in the database

2. Very Important Foreign Key Relationships
playerStatistics.playerStatusFK = athleteStatus.id
playerStatistics.playerFK = athletes.id
playerStatistics.leagueFK = league.id
playerStatistics.PlayerPositionFK = positions.id
playerStatistics.seasonFK = season.id
playerStatistics.playerTeamFK = teams.id

Section B: Match 'week' column in playerStatistics and the corresponding week for the betting line tables
1. Get the available weeks and correct current season (year) from the playerStatistics table.
/*sqlite3 query*/
SELECT DISTINCT week
FROM playerStatistics
WHERE weekStart LIKE('%2023%')
ORDER BY week;

2. Choose a week from the playerStatistics table based on the available weeks and the current season (year).
/*sqlite3 query*/
SELECT weekStart, weekEnd, week
FROM playerStatistics
WHERE week LIKE('week 6') AND
weekStart LIKE('%2023%')

Section C: FantasyPros Table foreign key relationships
1. The FantasyPros tables are as follows:
fantasy_pros_Def
fantasy_pros_K
fantasy_pros_QB
fantasy_pros_RB
fantasy_pros_TE
fantasy_pros_WR

2. FantasyPros Tables Foreign Key Relationships
fantasy_pros_Def.team_id = teams.id 

fantasy_pros_K.player_id = athletes.id
fantasy_pros_K.position_id = positions.id
fantasy_pros_K.team_id = teams.id

fantasy_pros_QB.player_id = athletes.id  
fantasy_pros_QB.position_id = positions.id  
fantasy_pros_QB.team_id = teams.id  

fantasy_pros_RB.player_id = athletes.id  
fantasy_pros_RB.position_id = positions.id  
fantasy_pros_RB.team_id = teams.id  

fantasy_pros_QB.player_id = athletes.id   
fantasy_pros_QB.position_id = positions.id   
fantasy_pros_QB.team_id = teams.id   

fantasy_pros_TE.player_id = athletes.id   
fantasy_pros_TE.position_id = positions.id   
fantasy_pros_TE.team_id = teams.id   

fantasy_pros_WR.player_id = athletes.id   
fantasy_pros_WR.position_id = positions.id   
fantasy_pros_WR.team_id = teams.id   

3. Obtain the available weeks for the FantasyPros tables

/*sqlite3 query available weeks for FantasyPros Defense (Def) position*/
SELECT DISTINCT week
FROM fantasy_pros_Def
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Kicker (K) position*/
SELECT DISTINCT week
FROM fantasy_pros_K
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Quarterback (QB) position*/
SELECT DISTINCT week
FROM fantasy_pros_QB
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Runningback (RB) position*/
SELECT DISTINCT week
FROM fantasy_pros_RB
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Tightend (TE) position*/
SELECT DISTINCT week
FROM fantasy_pros_TE
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Widereceiver (WR) position*/
SELECT DISTINCT week
FROM fantasy_pros_WR
WHERE season LIKE = 2023
ORDER by week ASC

4. Match playerStatistics week to the corresponding week in FantasyPros tables.
/*sqlite3 query to combine available weeks for playerStatistics and FantasyPros tables*/
SELECT week, 'playerStatistics' as source
FROM (
    SELECT DISTINCT week
    FROM playerStatistics
    WHERE weekStart LIKE('%2023%')
) as ps

UNION ALL

SELECT week, 'fantasy_pros_WR' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_WR
    WHERE season = 2023
) as wr

UNION ALL

SELECT week, 'fantasy_pros_TE' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_TE
    WHERE season = 2023
) as te

UNION ALL

SELECT week, 'fantasy_pros_RB' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_RB
    WHERE season = 2023
) as rb

UNION ALL

SELECT week, 'fantasy_pros_QB' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_QB
    WHERE season = 2023
) as qb

UNION ALL

SELECT week, 'fantasy_pros_K' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_K
    WHERE season = 2023
) as k

UNION ALL

SELECT week, 'fantasy_pros_Def' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_Def
    WHERE season = 2023
) as def

ORDER BY week, source;

5. Return reults for individual athletes

/*sql query to return individual athlete stats and fp betting line*/
SELECT 
    ps.playerFK AS player_id,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.pass_tds AS fp_projected_tds,
    ROUND((ps.PassingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS TD_per_game,
    fp.pass_yds AS fp_projected_pass_yards,
    ps.PassingYardsPerGame,    
    fp.pass_att AS fp_projected_pass_attempts,    
    ROUND((ps.PassingAttempts * 1.0 / ps.GamesPlayed),2) AS pass_attempts_per_game,
    fp.pass_cmp AS fp_projected_completions,
    ROUND((ps.Completions * 1.0 / ps.GamesPlayed),2) AS pass_completions_per_game,
    fp.pass_ints AS fp_projected_interceptions,
    ROUND((ps.Interceptions * 1.0 / ps.GamesPlayed),2) AS int_per_game
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_QB fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
WHERE 
    ps.playerFK = 12483
    AND strftime('%Y', ps.weekStart) = '2023'
    AND ps.PassingTouchdowns IS NOT NULL
    AND fp.pass_tds IS NOT NULL
    AND ps.PassingYards IS NOT NULL
    AND fp.pass_yds IS NOT NULL
    AND ps.PassingAttempts IS NOT NULL
    AND fp.pass_att IS NOT NULL
    AND ps.Completions IS NOT NULL
    AND fp.pass_cmp IS NOT NULL
    AND ps.Interceptions IS NOT NULL
    AND fp.pass_ints IS NOT NULL;

6. Return results for top ranked positions

/*sql query to return results by QB position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.pass_tds AS fp_projected_tds,
    ROUND((ps.PassingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS TD_per_game,
    fp.pass_yds AS fp_projected_pass_yards,
    ps.PassingYardsPerGame,    
    fp.pass_att AS fp_projected_pass_attempts,    
    ROUND((ps.PassingAttempts * 1.0 / ps.GamesPlayed), 2) AS pass_attempts_per_game,
    fp.pass_cmp AS fp_projected_completions,
    ROUND((ps.Completions * 1.0 / ps.GamesPlayed), 2) AS pass_completions_per_game,
    fp.pass_ints AS fp_projected_interceptions,
    ROUND((ps.Interceptions * 1.0 / ps.GamesPlayed), 2) AS int_per_game
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_QB fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 8
    AND ps.week LIKE 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
	AND fp.pass_tds IS NOT NULL
	AND fp.pass_yds IS NOT NULL
	AND fp.pass_att IS NOT NULL
	AND fp.pass_cmp IS NOT NULL
	AND fp.pass_ints IS NOT NULL
    AND ps.PassingTouchdowns IS NOT NULL
    AND ps.PassingYards IS NOT NULL
    AND ps.PassingAttempts IS NOT NULL
    AND ps.Completions IS NOT NULL
  
ORDER BY 
    fp_projected_points DESC;


/*sql query to return results by WR position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.points_ppr,
	fp.rec_rec AS fp_projected_receptions,
	ROUND((ps.Receptions * 1.0 / ps.GamesPlayed), 2) AS receptions_per_game,
	fp.rec_yds AS fp_projected_rec_yards,
	ps.ReceivingYardsPerGame,	
	ps.YardsPerReception,
	fp.rec_tds AS fp_projected_rec_tds,
	ROUND((ps.ReceivingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS receiving_tds_per_game,	
	ROUND((ps.ReceivingTargets * 1.0 / ps.GamesPlayed), 2) AS targets_per_game,	
	ROUND((ps.ReceivingYardsAfterCatch  * 1.0 / ps.GamesPlayed),2) AS rec_yds_after_catch_per_game,
	ROUND((ps.ReceivingFirstDowns  * 1.0 / ps.GamesPlayed),2) AS rec_1st_downs_per_game,
	ROUND((ps.Yards20PlusReceivingPlays  * 1.0 / ps.GamesPlayed),2) AS rec_yds_20Plus_per_game
  
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_WR fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 1
    AND ps.week LIKE 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
	AND fp.points IS NOT NULL
	AND fp.points_ppr IS NOT NULL
	AND fp.rec_rec IS NOT NULL
	AND fp.rec_tds IS NOT NULL
	AND fp.rec_yds IS NOT NULL
	AND ps.Receptions IS NOT NULL
	AND ps.YardsPerReception IS NOT NULL
	AND ps.ReceivingTargets IS NOT NULL
	AND ps.ReceivingYards IS NOT NULL 
	AND ps.ReceivingYardsPerGame IS NOT NULL
	AND ps. ReceivingYardsAfterCatch IS NOT NULL
	AND ps.ReceivingFirstDowns IS NOT NULL 

ORDER BY 
    fp_projected_points DESC;


/*sql query to return results by RB position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.points_ppr,
	fp.rush_att AS fp_projected_rush_attempts,
	ROUND((ps.RushingAttempts * 1.0 / ps.GamesPlayed), 2) AS rushing_attempts_per_game,	
	fp.rush_yds AS fp_projected_rushing_yards,
	ps.RushingYardsPerGame,
	fp.rush_tds AS fp_projected_rush_tds,
	ROUND((ps.RushingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS rushing_tds_per_game,	
	ROUND((ps.Rushing1stDowns * 1.0 / ps.GamesPlayed), 2) AS rushing_1st_Downs_per_game,	
	fp.rec_rec AS fp_projected_receptions,
	ROUND((ps.Receptions * 1.0 / ps.GamesPlayed), 2) AS receptions_per_game,
	fp.rec_yds AS fp_projected_rec_yards,
	ps.ReceivingYardsPerGame,
	fp.rec_tds AS fp_projected_rec_tds,
	ROUND((ps.ReceivingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS receiving_tds_per_game
	
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_RB fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 9
    AND ps.week LIKE 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
	AND fp.points IS NOT NULL
	AND fp.points_ppr IS NOT NULL
	AND fp.rush_att IS NOT NULL
	AND fp.rush_yds IS NOT NULL
	AND fp.rush_tds IS NOT NULL
	AND ps.RushingAttempts IS NOT NULL 
	AND ps.RushingTouchdowns IS NOT NULL
	AND ps.RushingYards IS NOT NULL

ORDER BY 
    fp_projected_points DESC;


/*sql query to return results by TE position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.points_ppr,
	fp.rec_rec AS fp_projected_receptions,
	ROUND((ps.Receptions * 1.0 / ps.GamesPlayed), 2) AS receptions_per_game,
	fp.rec_yds AS fp_projected_rec_yards,
	ps.ReceivingYardsPerGame,	
	ps.YardsPerReception,
	fp.rec_tds AS fp_projected_rec_tds,
	ROUND((ps.ReceivingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS receiving_tds_per_game,	
	ROUND((ps.ReceivingTargets * 1.0 / ps.GamesPlayed), 2) AS targets_per_game,	
	ROUND((ps.ReceivingYardsAfterCatch  * 1.0 / ps.GamesPlayed),2) AS rec_yds_after_catch_per_game,
	ROUND((ps.ReceivingFirstDowns  * 1.0 / ps.GamesPlayed),2) AS rec_1st_downs_per_game,
	ROUND((ps.Yards20PlusReceivingPlays  * 1.0 / ps.GamesPlayed),2) AS rec_yds_20Plus_per_game
  
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_TE fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 7
    AND ps.week LIKE 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
	AND fp.points IS NOT NULL
	AND fp.points_ppr IS NOT NULL
	AND fp.rec_rec IS NOT NULL
	AND fp.rec_tds IS NOT NULL
	AND fp.rec_yds IS NOT NULL
	AND ps.Receptions IS NOT NULL
	AND ps.YardsPerReception IS NOT NULL
	AND ps.ReceivingTargets IS NOT NULL
	AND ps.ReceivingYards IS NOT NULL 
	AND ps.ReceivingYardsPerGame IS NOT NULL
	AND ps. ReceivingYardsAfterCatch IS NOT NULL
	AND ps.ReceivingFirstDowns IS NOT NULL 

ORDER BY 
    fp_projected_points DESC;


/*sql query to return results by K position and fp projected points by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    ps.TotalPointsPerGame
	
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_K fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week = 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 22 
    AND ps.week = 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
    AND fp.points IS NOT NULL
    AND fp.fga IS NOT NULL
    AND fp.fg IS NOT NULL
    AND fp.xpt IS NOT NULL
    AND ps.TotalPointsPerGame IS NOT NULL
  
ORDER BY 
    fp_projected_points DESC;


/*sql query to return results by K position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.fga AS fp_projected_Field_Goals_attempts,
    ROUND((ps.FieldGoalAttempts * 1.0 / ps.GamesPlayed), 2) AS Field_Goals_Attempts_per_game,
    fp.fg AS fp_projected_Field_Goals,
    ROUND((ps.FieldGoalMade * 1.0 / ps.GamesPlayed), 2) AS Field_Goals_Made_per_game,
    fp.xpt AS fp_projected_Extra_points,
    ROUND((ps.ExtraPointsMade * 1.0 / ps.GamesPlayed), 2) AS Extra_Points_per_game
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_K fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week = 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 22 
    AND ps.week = 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
    AND fp.fga IS NOT NULL
    AND fp.fg IS NOT NULL
    AND fp.xpt IS NOT NULL
    AND (
        ps.FieldGoalAttempts IS NOT NULL
        OR ps.FieldGoalMade IS NOT NULL
        OR ps.ExtraPointsMade IS NOT NULL
    )
    AND (
        ROUND((ps.FieldGoalAttempts * 1.0 / ps.GamesPlayed), 2) IS NOT NULL
        OR ROUND((ps.FieldGoalMade * 1.0 / ps.GamesPlayed), 2) IS NOT NULL
        OR ROUND((ps.ExtraPointsMade * 1.0 / ps.GamesPlayed), 2) IS NOT NULL
    )
ORDER BY 
    fp.fga DESC;


7. Return predicted game scores, moneyline, and odds

/*sql query to return predicted game scores*/
SELECT 
    dk.gameID,
    dk.gameDate,
    ht.teamShortName AS homeTeam,
    at.teamShortName AS awayTeam,
    dk.predictedHomeTeamScore AS dk_HomeScore,
    fd.predictedHomeTeamScore AS fd_HomeScore,
    mgm.predictedHomeTeamScore AS mgm_HomeScore,
    pb.predictedHomeTeamScore AS pb_HomeScore,
    dk.predictedOpponentTeamScore AS dk_AwayScore,  
    fd.predictedOpponentTeamScore AS fd_AwayScore, 
    mgm.predictedOpponentTeamScore AS mgm_AwayScore,
    pb.predictedOpponentTeamScore AS pb_AwayScore
FROM 
    draft_kings_lines dk
JOIN 
    fanduel_lines fd ON dk.gameID = fd.gameID AND dk.gameDate = fd.gameDate
JOIN 
    mgm_lines mgm ON dk.gameID = mgm.gameID AND dk.gameDate = mgm.gameDate
JOIN 
    pointsbet_lines pb ON dk.gameID = pb.gameID AND dk.gameDate = pb.gameDate
JOIN 
    teams ht ON dk.homeTeam = ht.id
JOIN 
    teams at ON dk.awayTeam = at.id
GROUP BY 
    dk.gameID
ORDER BY 
    dk.gameID, homeTeam;


/*sql query to return moneylines*/
SELECT DISTINCT
    dk.gameID,
    dk.gameDate,
    ht.teamShortName AS Team,
    dk.moneyline AS dk_moneyline,
    fd.moneyline AS fd_moneyline,
    mgm.moneyline AS mgm_moneyline,
    pb.moneyline AS pb_moneyline
FROM 
    draft_kings_lines dk
JOIN 
    fanduel_lines fd ON dk.gameID = fd.gameID AND dk.gameDate = fd.gameDate AND dk.homeTeam = fd.homeTeam AND dk.awayTeam = fd.awayTeam
JOIN 
    mgm_lines mgm ON dk.gameID = mgm.gameID AND dk.gameDate = mgm.gameDate AND dk.homeTeam = mgm.homeTeam AND dk.awayTeam = mgm.awayTeam
JOIN 
    pointsbet_lines pb ON dk.gameID = pb.gameID AND dk.gameDate = pb.gameDate AND dk.homeTeam = pb.homeTeam AND dk.awayTeam = pb.awayTeam
JOIN 
    teams ht ON dk.homeTeam = ht.id
JOIN 
    teams at ON dk.awayTeam = at.id
ORDER BY 
    dk.gameID, Team;


/*sql query to return moneylines and implied odds*/
SELECT DISTINCT
    dk.gameID,
    dk.gameDate,
    ht.teamShortName AS Team,
    dk.moneyline AS dk_moneyline,
    ROUND(
        CASE 
            WHEN dk.moneyline < 0 THEN (-1 * dk.moneyline) / ((-1 * dk.moneyline) + 100.0)
            ELSE 100.0 / (dk.moneyline + 100.0)
        END, 
        3
    ) AS dk_odds,
    fd.moneyline AS fd_moneyline,
    ROUND(
        CASE 
            WHEN fd.moneyline < 0 THEN (-1 * fd.moneyline) / ((-1 * fd.moneyline) + 100.0)
            ELSE 100.0 / (fd.moneyline + 100.0)
        END, 
        3
    ) AS fd_odds,
    mgm.moneyline AS mgm_moneyline,
    ROUND(
        CASE 
            WHEN mgm.moneyline < 0 THEN (-1 * mgm.moneyline) / ((-1 * mgm.moneyline) + 100.0)
            ELSE 100.0 / (mgm.moneyline + 100.0)
        END, 
        3
    ) AS mgm_odds,
    pb.moneyline AS pb_moneyline,
    ROUND(
        CASE 
            WHEN pb.moneyline < 0 THEN (-1 * pb.moneyline) / ((-1 * pb.moneyline) + 100.0)
            ELSE 100.0 / (pb.moneyline + 100.0)
        END, 
        3
    ) AS pb_odds
FROM 
    draft_kings_lines dk
JOIN 
    fanduel_lines fd ON dk.gameID = fd.gameID AND dk.gameDate = fd.gameDate AND dk.homeTeam = fd.homeTeam AND dk.awayTeam = fd.awayTeam
JOIN 
    mgm_lines mgm ON dk.gameID = mgm.gameID AND dk.gameDate = mgm.gameDate AND dk.homeTeam = mgm.homeTeam AND dk.awayTeam = mgm.awayTeam
JOIN 
    pointsbet_lines pb ON dk.gameID = pb.gameID AND dk.gameDate = pb.gameDate AND dk.homeTeam = pb.homeTeam AND dk.awayTeam = pb.awayTeam
JOIN 
    teams ht ON dk.homeTeam = ht.id
JOIN 
    teams at ON dk.awayTeam = at.id
ORDER BY 
    dk.gameID, Team;


8. Prop bets moneyline, and odds

/*sql query to return prop bets moneyline*/
SELECT 
    pff.props_last_updated_at AS date,
    pff.player_id AS player,
    a.firstName AS player_first_name,
    a.lastName AS player_last_name,
    pff.position_id AS position,
    pos.position AS position_name,
    pff.team_id AS team,
    t.teamShortName AS team_name,
    pff.prop_type,
    pff.projection,
    pff.line,
    pff.over,
    pff.under
FROM 
    pro_football_focus pff
JOIN 
    athletes a ON pff.player_id = a.id
JOIN 
    positions pos ON pff.position_id = pos.id
JOIN 
    teams t ON pff.team_id = t.id
ORDER BY date DESC


/*sql query to return prop bets moneyline and odds*/
SELECT 
    pff.props_last_updated_at AS date,
    pff.player_id AS player,
    a.firstName AS player_first_name,
    a.lastName AS player_last_name,
    pff.position_id AS position,
    pos.position AS position_name,
    pff.team_id AS team,
    t.teamShortName AS team_name,
    pff.prop_type,
    pff.projection,
    pff.line,
    pff.over,
    ROUND(
        CASE 
            WHEN pff.over < 0 THEN (-1 * pff.over) / ((-1 * pff.over) + 100.0)
            ELSE 100.0 / (pff.over + 100.0)
        END, 
        3
    ) AS pff_over_odds,
    pff.under,
    ROUND(
        CASE 
            WHEN pff.under < 0 THEN (-1 * pff.under) / ((-1 * pff.under) + 100.0)
            ELSE 100.0 / (pff.under + 100.0)
        END, 
        3
    ) AS pff_under_odds
FROM 
    pro_football_focus pff
JOIN 
    athletes a ON pff.player_id = a.id
JOIN 
    positions pos ON pff.position_id = pos.id
JOIN 
    teams t ON pff.team_id = t.id;


8. Return results by position and week

/*sql query returns QB stats by week */
SELECT
    ps.weekStart,
    ps.weekEnd,
    ps.week,
    a.firstName,
    a.lastName,
    pos.abbr AS position,
    ps.PassingTouchdowns AS passing_touchdowns,   
    ps.PassingYards AS passing_yards,
	ps.Completions,
    ps.PassingAttempts AS passing_attempts,
	ps.Interceptions AS interceptions,
	ps.TotalQBR
FROM
    playerStatistics ps
JOIN 
    athletes a ON ps.playerFK = a.id
JOIN 
    positions pos ON ps.PlayerPositionFK = pos.id
JOIN 
    athleteStatus ast ON ps.playerStatusFK = ast.id
WHERE
    pos.abbr = 'QB'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND ps.week IN ('Week 10')
    AND NOT (
        ps.PassingTouchdowns IS NULL AND
        ps.PassingYards IS NULL AND
        ps.PassingAttempts IS NULL AND
        ps.Completions IS NULL AND
        ps.PassingTouchdowns IS NULL
    )
ORDER BY
    ps.PassingTouchdowns DESC;


/*sql query returns RB stats by week */
SELECT
    ps.weekStart,
    ps.weekEnd,
    ps.week,
    a.firstName,
    a.lastName,
    pos.abbr AS position,
    ps.RushingAttempts AS rushing_attempts,
    ps.RushingYards AS rushing_yards,
    ps.RushingTouchdowns AS rushing_touchdowns,
    ps.Rushing1stDowns AS rushing_first_downs,
    ps.RushingFumbles AS rushing_fumbles,
    ps.RushingFumblesLost AS rushing_fumbles_lost
FROM
    playerStatistics ps
JOIN 
    athletes a ON ps.playerFK = a.id
JOIN 
    positions pos ON ps.PlayerPositionFK = pos.id
JOIN 
    athleteStatus ast ON ps.playerStatusFK = ast.id
WHERE
    pos.abbr = 'RB'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND ps.week IN ('Week 10')
    AND NOT (
        ps.RushingAttempts IS NULL AND
        ps.RushingYards IS NULL AND
        ps.RushingTouchdowns IS NULL AND
        ps.Rushing1stDowns IS NULL AND
        ps.RushingFumbles IS NULL AND
        ps.RushingFumblesLost IS NULL
    )
ORDER BY
    ps.RushingTouchdowns DESC;


/*sql query returns TE / WR stats by week*/
SELECT
    ps.weekStart,
    ps.weekEnd,
    ps.week,
    a.firstName,
    a.lastName,
    pos.abbr AS position,
    ps.Receptions AS receptions,
    ps.ReceivingTargets AS receiving_targets,
    ps.ReceivingYards AS receiving_yards,
    ps.ReceivingTouchdowns AS receiving_touchdowns,
    ps.ReceivingYardsAfterCatch AS receiving_yards_after_catch,
    ps.ReceivingFirstDowns AS receiving_first_downs,
    ps.Yards20PlusReceivingPlays AS twenty_plus_yards_receiving_plays
FROM
    playerStatistics ps
JOIN 
    athletes a ON ps.playerFK = a.id
JOIN 
    positions pos ON ps.PlayerPositionFK = pos.id
JOIN 
    athleteStatus ast ON ps.playerStatusFK = ast.id
WHERE
    pos.abbr IN ('WR', 'TE')
    AND strftime('%Y', ps.weekStart) = '2023'
    AND ps.week IN ('Week 10')
    AND NOT (
        ps.Receptions IS NULL AND
        ps.ReceivingYards IS NULL AND
        ps.ReceivingTouchdowns IS NULL AND
        ps.ReceivingTargets IS NULL AND
        ps.ReceivingYardsAfterCatch IS NULL AND
        ps.ReceivingFirstDowns IS NULL AND
        ps.Yards20PlusReceivingPlays IS NULL
    )
ORDER BY
    ps.ReceivingTouchdowns DESC;


/*query returns weekly athlete stats */
SELECT
    ps.weekStart,
    ps.weekEnd,
    ps.week,
    a.firstName,
    a.lastName,
    pos.abbr AS position,
    ps.PassingTouchdowns AS passing_touchdowns,
    ps.TotalQBR,
    ps.PassingYards AS passing_yards,
    ps.PassingAttempts AS passing_attempts,
    ps.Completions AS completions,
    ps.Interceptions AS interceptions,
    ps.RushingAttempts AS rushing_attempts,
    ps.RushingYards AS rushing_yards,
    ps.RushingTouchdowns AS rushing_touchdowns,
    ps.Rushing1stDowns AS rushing_first_downs,
    ps.RushingFumbles AS rushing_fumbles,
    ps.RushingFumblesLost AS rushing_fumbles_lost,
    ps.Receptions AS receptions,
    ps.ReceivingYards AS receiving_yards,
    ps.ReceivingTouchdowns AS receiving_touchdowns,
    ps.ReceivingTargets AS receiving_targets,
    ps.ReceivingYardsAfterCatch AS receiving_yards_after_catch,
    ps.ReceivingFirstDowns AS receiving_first_downs,
    ps.Yards20PlusReceivingPlays AS twenty_plus_yards_receiving_plays,
    ps.FieldGoalAttempts AS field_goal_attempts,
    ps.FieldGoalMade AS field_goals_made,
    ps.ExtraPointsMade AS extra_points_made
FROM
    playerStatistics ps
JOIN 
    athletes a ON ps.playerFK = a.id
JOIN 
    positions pos ON ps.PlayerPositionFK = pos.id
WHERE
    LOWER(a.firstName) = LOWER('patrick')
    AND LOWER(a.lastName) = LOWER('mahomes')
    AND strftime('%Y', ps.weekStart) = '2023'
    AND NOT (
        ps.PassingTouchdowns IS NULL AND
        ps.TotalQBR IS NULL AND
        ps.PassingYards IS NULL AND
        ps.PassingAttempts IS NULL AND
        ps.Completions IS NULL AND
        ps.Interceptions IS NULL AND
        ps.RushingAttempts IS NULL AND
        ps.RushingYards IS NULL AND
        ps.RushingTouchdowns IS NULL AND
        ps.Rushing1stDowns IS NULL AND
        ps.RushingFumbles IS NULL AND
        ps.RushingFumblesLost IS NULL AND
        ps.Receptions IS NULL AND
        ps.ReceivingYards IS NULL AND
        ps.ReceivingTouchdowns IS NULL AND
        ps.ReceivingTargets IS NULL AND
        ps.ReceivingYardsAfterCatch IS NULL AND
        ps.ReceivingFirstDowns IS NULL AND
        ps.Yards20PlusReceivingPlays IS NULL AND
        ps.FieldGoalAttempts IS NULL AND
        ps.FieldGoalMade IS NULL AND
        ps.ExtraPointsMade IS NULL
    )
ORDER BY
    CAST(SUBSTR(ps.week, 6) AS INTEGER) DESC;

9. airyards

/*sql query returns airyards*/
SELECT
    ps.weekStart,
    ps.weekEnd,
    ps.week,
    a.firstName,
    a.lastName,
    pos.abbr AS position,
	ps.ReceivingYards AS receiving_yards,
    ps.Receptions AS receptions,
    ps.ReceivingTargets AS receiving_targets,
    ps.ReceivingYardsAfterCatch AS receiving_yards_after_catch,
    (ps.ReceivingYards - ps.ReceivingYardsAfterCatch) AS air_yards
FROM
    playerStatistics ps
JOIN 
    athletes a ON ps.playerFK = a.id
JOIN 
    positions pos ON ps.PlayerPositionFK = pos.id
WHERE
    pos.abbr = 'WR'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND NOT (
        ps.Receptions IS NULL AND
        ps.ReceivingTargets IS NULL AND
        ps.ReceivingYards IS NULL AND
        ps.ReceivingYardsAfterCatch IS NULL
    )
ORDER BY
    CAST(SUBSTR(ps.week, 6) AS INTEGER) DESC;

/*query reuturns QB-WR stats and airyards*/
WITH wr_stats AS (
    SELECT
        ps.weekStart,
        ps.weekEnd,
        ps.week,
        ps.playerTeamFK,
        ps.playerFK,
        a.firstName AS WR_firstName,
        a.lastName AS WR_lastName,
        pos.abbr AS WR_position,
        t.teamName AS team_name,
        SUM(ps.ReceivingYards) AS WR_receiving_yards,
        SUM(ps.Receptions) AS WR_receptions,
        SUM(ps.ReceivingTargets) AS WR_receiving_targets,
        SUM(ps.ReceivingYards - ps.ReceivingYardsAfterCatch) AS WR_air_yards
    FROM
        playerStatistics ps
    JOIN 
        athletes a ON ps.playerFK = a.id
    JOIN 
        positions pos ON ps.PlayerPositionFK = pos.id
    JOIN 
        teams t ON ps.playerTeamFK = t.id
    WHERE
        pos.abbr = 'WR'
        AND strftime('%Y', ps.weekStart) = '2023'
        AND ps.ReceivingYards IS NOT NULL
    GROUP BY
        ps.week, ps.playerTeamFK, ps.playerFK
),
qb_stats AS (
    SELECT
        ps.week,
        ps.playerTeamFK,
        SUM(ps.PassingYards) AS QB_passing_yards,
        SUM(ps.Completions) AS QB_completions,
        SUM(ps.PassingAttempts) AS QB_passing_attempts
    FROM
        playerStatistics ps
    JOIN 
        positions qb_pos ON ps.PlayerPositionFK = qb_pos.id
    WHERE
        qb_pos.abbr = 'QB'
        AND strftime('%Y', ps.weekStart) = '2023'
        AND ps.PassingYards IS NOT NULL
    GROUP BY
        ps.week, ps.playerTeamFK
)
SELECT
    wr_stats.weekStart,
    wr_stats.weekEnd,
    wr_stats.week,
    wr_stats.WR_firstName,
    wr_stats.WR_lastName,
    wr_stats.WR_position,
    wr_stats.team_name,
    qb_stats.QB_passing_yards,
    qb_stats.QB_completions,
    qb_stats.QB_passing_attempts,
    wr_stats.WR_receiving_yards,
    wr_stats.WR_receptions,
    wr_stats.WR_receiving_targets,
    ROUND((wr_stats.WR_receiving_yards * 1.0 / qb_stats.QB_passing_yards), 3) AS WR_pct_of_QB_passing_yards,
    ROUND((wr_stats.WR_receptions * 1.0 / qb_stats.QB_completions), 3) AS WR_pct_of_QB_completions,
    ROUND((wr_stats.WR_receiving_targets * 1.0 / qb_stats.QB_passing_attempts), 3) AS WR_pct_of_QB_passing_attempts,
    wr_stats.WR_air_yards
FROM
    wr_stats
JOIN 
    qb_stats ON wr_stats.week = qb_stats.week AND wr_stats.playerTeamFK = qb_stats.playerTeamFK
WHERE
    qb_stats.QB_passing_yards > 100
    AND ROUND((wr_stats.WR_receiving_yards * 1.0 / qb_stats.QB_passing_yards), 3) >= 0
    AND ROUND((wr_stats.WR_receptions * 1.0 / qb_stats.QB_completions), 3) >= 0
    AND ROUND((wr_stats.WR_receiving_targets * 1.0 / qb_stats.QB_passing_attempts), 3) >= 0
ORDER BY
    CAST(SUBSTR(wr_stats.week, 6) AS INTEGER) DESC;



# Tasks
# remember the weekly status are cumulative 
# go back and make sure any modified column names reflect the cumulative stats
# review the definitions

# Future Item
# sql query for defense 
# espn defense for players will not match team defenses for fp 
# we can do individual def positions if that is part of the lineup; if not then not worth doing

# Future Item
# /*sql query to return sportsbook edge based on moneylines and implied odds: (impliedOdds1 + impliedOdds2) - 1*/


