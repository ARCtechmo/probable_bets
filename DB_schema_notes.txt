Section A: playerStatistics table and the Foreign Key (FK) Relationships

1. Very important schema information
playerStatistics table is based on the ESPN NFL athlete statstics imported from the ESPN API
playerStatistics is used to build all of the foreign key relationships in the database

2. Very Important Foreign Key Relationships
playerStatistics.playerStatusFK = athleteStatus.id
playerStatistics.playerFK = athletes.id
playerStatistics.leagueFK = league.id
playerStatistics.PlayerPositionFK = positions.id
playerStatistics.seasonFK = season.id
playerStatistics.playerTeamFK = teams.id

Section B: Match 'week' column in playerStatistics and the corresponding week for the betting line tables
1. Get the available weeks and correct current season (year) from the playerStatistics table.
/*sqlite3 query*/
SELECT DISTINCT week
FROM playerStatistics
WHERE weekStart LIKE('%2023%')
ORDER BY week;

2. Choose a week from the playerStatistics table based on the available weeks and the current season (year).
/*sqlite3 query*/
SELECT weekStart, weekEnd, week
FROM playerStatistics
WHERE week LIKE('week 6') AND
weekStart LIKE('%2023%')

Section C: FantasyPros Table foreign key relationships
1. The FantasyPros tables are as follows:
fantasy_pros_Def
fantasy_pros_K
fantasy_pros_QB
fantasy_pros_RB
fantasy_pros_TE
fantasy_pros_WR

2. FantasyPros Tables Foreign Key Relationships
fantasy_pros_Def.team_id = teams.id 

fantasy_pros_K.player_id = athletes.id
fantasy_pros_K.position_id = positions.id
fantasy_pros_K.team_id = teams.id

fantasy_pros_QB.player_id = athletes.id  
fantasy_pros_QB.position_id = positions.id  
fantasy_pros_QB.team_id = teams.id  

fantasy_pros_RB.player_id = athletes.id  
fantasy_pros_RB.position_id = positions.id  
fantasy_pros_RB.team_id = teams.id  

fantasy_pros_QB.player_id = athletes.id   
fantasy_pros_QB.position_id = positions.id   
fantasy_pros_QB.team_id = teams.id   

fantasy_pros_TE.player_id = athletes.id   
fantasy_pros_TE.position_id = positions.id   
fantasy_pros_TE.team_id = teams.id   

fantasy_pros_WR.player_id = athletes.id   
fantasy_pros_WR.position_id = positions.id   
fantasy_pros_WR.team_id = teams.id   

3. Obtain the available weeks for the FantasyPros tables

/*sqlite3 query available weeks for FantasyPros Defense (Def) position*/
SELECT DISTINCT week
FROM fantasy_pros_Def
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Kicker (K) position*/
SELECT DISTINCT week
FROM fantasy_pros_K
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Quarterback (QB) position*/
SELECT DISTINCT week
FROM fantasy_pros_QB
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Runningback (RB) position*/
SELECT DISTINCT week
FROM fantasy_pros_RB
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Tightend (TE) position*/
SELECT DISTINCT week
FROM fantasy_pros_TE
WHERE season LIKE = 2023
ORDER by week ASC

/*sqlite3 query available weeks for FantasyPros Widereceiver (WR) position*/
SELECT DISTINCT week
FROM fantasy_pros_WR
WHERE season LIKE = 2023
ORDER by week ASC

4. Match playerStatistics week to the corresponding week in FantasyPros tables.
/*sqlite3 query to combine available weeks for playerStatistics and FantasyPros tables*/
SELECT week, 'playerStatistics' as source
FROM (
    SELECT DISTINCT week
    FROM playerStatistics
    WHERE weekStart LIKE('%2023%')
) as ps

UNION ALL

SELECT week, 'fantasy_pros_WR' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_WR
    WHERE season = 2023
) as wr

UNION ALL

SELECT week, 'fantasy_pros_TE' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_TE
    WHERE season = 2023
) as te

UNION ALL

SELECT week, 'fantasy_pros_RB' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_RB
    WHERE season = 2023
) as rb

UNION ALL

SELECT week, 'fantasy_pros_QB' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_QB
    WHERE season = 2023
) as qb

UNION ALL

SELECT week, 'fantasy_pros_K' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_K
    WHERE season = 2023
) as k

UNION ALL

SELECT week, 'fantasy_pros_Def' as source
FROM (
    SELECT DISTINCT week
    FROM fantasy_pros_Def
    WHERE season = 2023
) as def

ORDER BY week, source;

5. Return reults for individual athletes
/*sql query to return individual athlete stats and fp betting line*/
SELECT 
    ps.playerFK AS player_id,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.pass_tds AS fp_projected_tds,
    ROUND((ps.PassingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS TD_per_game,
    fp.pass_yds AS fp_projected_pass_yards,
    ps.PassingYardsPerGame,    
    fp.pass_att AS fp_projected_pass_attempts,    
    ROUND((ps.PassingAttempts * 1.0 / ps.GamesPlayed),2) AS pass_attempts_per_game,
    fp.pass_cmp AS fp_projected_completions,
    ROUND((ps.Completions * 1.0 / ps.GamesPlayed),2) AS pass_completions_per_game,
    fp.pass_ints AS fp_projected_interceptions,
    ROUND((ps.Interceptions * 1.0 / ps.GamesPlayed),2) AS int_per_game
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_QB fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
WHERE 
    ps.playerFK = 12483
    AND strftime('%Y', ps.weekStart) = '2023'
    AND ps.PassingTouchdowns IS NOT NULL
    AND fp.pass_tds IS NOT NULL
    AND ps.PassingYards IS NOT NULL
    AND fp.pass_yds IS NOT NULL
    AND ps.PassingAttempts IS NOT NULL
    AND fp.pass_att IS NOT NULL
    AND ps.Completions IS NOT NULL
    AND fp.pass_cmp IS NOT NULL
    AND ps.Interceptions IS NOT NULL
    AND fp.pass_ints IS NOT NULL;

6. Return results for top ranked positions
/*sql query to return results by QB position and fp betting line by week*/
SELECT 
    ps.playerFK AS player_id,
    a.firstName,
    a.lastName,
    ps.week,
    ps.weekStart,
    ps.weekEnd,
    ps.GamesPlayed,
    fp.points AS fp_projected_points,
    fp.pass_tds AS fp_projected_tds,
    ROUND((ps.PassingTouchdowns * 1.0 / ps.GamesPlayed), 2) AS TD_per_game,
    fp.pass_yds AS fp_projected_pass_yards,
    ps.PassingYardsPerGame,    
    fp.pass_att AS fp_projected_pass_attempts,    
    ROUND((ps.PassingAttempts * 1.0 / ps.GamesPlayed), 2) AS pass_attempts_per_game,
    fp.pass_cmp AS fp_projected_completions,
    ROUND((ps.Completions * 1.0 / ps.GamesPlayed), 2) AS pass_completions_per_game,
    fp.pass_ints AS fp_projected_interceptions,
    ROUND((ps.Interceptions * 1.0 / ps.GamesPlayed), 2) AS int_per_game
FROM 
    playerStatistics ps
JOIN 
    fantasy_pros_QB fp 
ON 
    ps.playerFK = fp.player_id 
    AND ps.week LIKE 'Week ' || fp.week
    AND strftime('%Y', ps.weekStart) = fp.season
JOIN 
    athletes a 
ON 
    ps.playerFK = a.id
WHERE 
    ps.PlayerPositionFK = 8
    AND ps.week LIKE 'Week 10'
    AND strftime('%Y', ps.weekStart) = '2023'
    AND fp.week = 10
    AND ps.PassingTouchdowns IS NOT NULL
    AND fp.pass_tds IS NOT NULL
    AND ps.PassingYards IS NOT NULL
    AND fp.pass_yds IS NOT NULL
    AND ps.PassingAttempts IS NOT NULL
    AND fp.pass_att IS NOT NULL
    AND ps.Completions IS NOT NULL
    AND fp.pass_cmp IS NOT NULL
    AND ps.Interceptions IS NOT NULL
    AND fp.pass_ints IS NOT NULL
ORDER BY 
    fp_projected_points DESC;

# Tasks
/*sql query to return results by Def position and fp betting line by week*/
/*sql query to return results by K position and fp betting line by week*/
/*sql query to return results by RB position and fp betting line by week*/
/*sql query to return results by TE position and fp betting line by week*/
/*sql query to return results by WR position and fp betting line by week*/


# Tasks
# section x: airyards
# this is just deep passes per game so create your own stats



